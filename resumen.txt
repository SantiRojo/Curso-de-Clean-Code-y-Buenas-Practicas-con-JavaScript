Curso de Clean Code y Buenas Prácticas con JavaScript
--------------------------------------------------------

--------------------------------------------------------
DEUDA TÉCNICA
--------------------------------------------------------

"Nuestro código tiene que ser simple y directo, debería de leerse con la misma facilidad que un texto bien escrito"

Tipos de Deuda Técnica:

- Imprudente y deliberada -> el desarrollador es consciente de lo que va a hacer y no toma en cuenta el factor de deuda que dejan en el código.

- Imprudente e inadvertida -> el desarrollador no sabe de la deuda que esta dejando y suele ser por falta de conocimiento técnico. Es muy común en los inicios de un desarrollador.

- Prudente y deliberada -> el desarrollador es consciente de la deuda técnica que está dejando pero es consciente de que la deuda se tiene que "pagar" (corregir). Mientras más rapido se corrija, más "barato" saldrá.

- Prudente e inadvertida -> el desarrollador no es consciente de la deuda que genera pero es prudente porque en su momento cree que lo que esta haciendo es la mejor forma. Suele ser muy común detectarla al finalizar un proyecto donde, en base a lo aprendido a lo largo del desarrollo, el desarrollador se da cuenta de lo que se podría haber hecho de una mejor manera.


--------------------------------------------------------
¿CÓMO "PAGAMOS" NUESTRA DEUDA?
--------------------------------------------------------

Lo hacemos a través de la refactorización de código.

¿Qué es refactorizar?

Es un proceso que tiene como objetivo mejorar el código de un proyecto sin alterar su comportamiento para que sea más entendible y tolerante a cambios.

Antes de ponernos a refactorizar código es importante que éste tenga test que validen el funcionamiento original de código para asegurarnos que vamos a mantener su funcionalidad original.

¿Cuándo refactorizar?

• Cuando el código sea de mala calidad

• Al detectar un code smell


--------------------------------------------------------
4 REGLAS DEL DISEñO SIMPLE
--------------------------------------------------------

1 - El código debe pasar correctamente los test: tener buenos test ayuda a asegurar la calidad del código en cuanto a su funcionalidad.

2 - Revela la intención del diseño: el código tiene que hablar por sí mismo, tiene que decirle a la persona que lo esta leyendo cuál es la intención de esa función, qué hace, para qué se usa esa variable.

3 - Respeta el principio DRY (Don't Repeat Yourself): si existe repetición de código es probable que se pueda englobar en una función y de esa manera evitar repeticiones de código que lo hacen más extenso y menos legible.

4 - Tiene menor número posible de elementos: mientras más simple sea el código, mucho mejor.


--------------------------------------------------------
CLEAN CODE
--------------------------------------------------------

¿Qué es?

Es un término popularizado por Robert C. Martin en su libro "Clean Code: A handbook of Agile Software Craftsmanship"

"El código limpio es aquel que se ha escrito con la intención de que otra persona lo entienda"


--------------------------------------------------------
¿CÓMO USAR VAR, LET Y CONST?
--------------------------------------------------------

Var -> era la única forma de declarar variables (y constantes) antes de ES6. No tiene en cuenta el scope y puede ser modificada y redeclarada desde cualquier parte del código, lo que lo hace más propenso a errores.

Let -> se utiliza para declarar variables cuyo valor puede cambiar.

Const -> se utiliza para declarar variables cuyo valor no va a cambiar. Dichas variables se nombran con mayúsculas.


* Ver ejemplos en archivo "var-let-const.js"


--------------------------------------------------------
REGLAS DE NOMENCLATURA
--------------------------------------------------------

• Nombres pronunciables y expresivos -> preferentemente en inglés y que tengan una estructura Camel Case ("camelCase"). Por otro lado hay que evitar el uso de guiones guiones bajos y abreviaturas

• Nombres sin información técnica -> debemos evitar que los nombres tengan información relacionada a la tecnología, como por ejemplo el tipo de dato, el tipo de clase, etc.

• Usar lenguaje ubicuo -> es aquel que se construye a partir del lenguaje que utilizan los expertos en el dominio, es decir, hay que construir un lenguaje en común entre quienes desarrollan la aplicación y los stakeholders (interesados) Hay que determinar palabras de uso común o específico.


* Ver ejemplos en archivo "nomenclatura.js"


--------------------------------------------------------
NOMBRES SEGÚN EL TIPO DE DATO
--------------------------------------------------------

• Arrays -> al ser listas o colecciones de valores es recomendable utilizar nombres en plural.

• Booleanos -> es recomendable utilizar prefijos como "is", "has" o "can", como decir: "es verdadero", "tiene un elemento" o "contiene x cosa"

• Números -> es recomendable añadirle un prefijo como "min", "max" o "total"

• Funciones -> ya que éstas representan una acción, es recomendable que el nombre inicie con un verbo seguido de un sustantivo y ser consisas, como por ejemplo "getName()". En funciones de acceso, modificación o predicado se recomienda añadir el prefijo "get", "set" o "is".

• Clases -> se recomienda utilizar sustantivos, por ejemplo la clase "User". Es importante no usar nombres genéricos como "Data" o "Manager".


* Ver ejemplos en archivo "nombres-segun-datos.js"


--------------------------------------------------------
ÁMBITO DE LAS VARIABLES O SCOPE
--------------------------------------------------------

Hace referencia a la visibilidad y vida util de las variables que escribimos en nuestro código.

En JavaScript existen 3 tipos de ámbitos:

• Ámbito Global -> cualquier variable puede ser accesada desde cualquier parte de nuestro código

• Ámbito Local o de Función -> las variables declaradas en este ámbito solo van a funcionar, existir, vivir dentro de este ámbito.

• Ámbito de Bloque -> las variables definidas entre { } (bloque de código) sólo están disponibles dentro de ese bloque y no pueden ser accedidas desde fuera de él, excepto que hayan sido declaradas con la palabra reservada "var".

• Ámbito estático -> es el comportamiento que tienen los ámbitos por defecto en JavaScript. Se determina en tiempo de compilación y no de ejecución, y a ésto se lo llama ámbito léxico


* Ver ejemplos en archivo "ambitos.js"

--------------------------------------------------------
HOISTING
--------------------------------------------------------

Hoisting es un término para describir que las declaraciones de variables y funciones son desplazadas a la parte superior del scope más cercano, scope global o de función. 

Esto sucede solamente con las declaraciones y no con las asignaciones. El código permanece igual, solo es una interpretación del motor de JavaScript.


* Ver ejemplos en archivo "hoisting.js"


--------------------------------------------------------
FUNCIONES
--------------------------------------------------------

"Se sabe que se ha desarrollado código limpio cuando cada función hace exactamente lo que su nombre indica"


PARÁMETROS Y ARGUMENTOS:

• Los ARGUMENTOS son aquellos que se utilizan en las llamadas de las funciones para ejecutar dicha función.

• Los PARÁMETROS son los que utilizamos dentro de nuestra función para trabajar con elementos externos



* Ver ejemplos en archivo "funciones.js"


--------------------------------------------------------
CLASES
--------------------------------------------------------

* Ver ejemplos en archivo "clases.js"


--------------------------------------------------------
HERENCIA
--------------------------------------------------------

* Ver ejemplos en archivo "herencia.js"


--------------------------------------------------------
TAMAñO REDUCIDO - PRINCIPIO DE RESPONSABILIDAD ÚNICA
--------------------------------------------------------

Tanto las funciones como las clases deben cumplir con un solo objetivo, ya que ésto nos permite escalar mucho mejor el código y tener un código más limpio

* Ver ejemplos en archivo "tamaño-reducido.js"


--------------------------------------------------------
ORGANIZACIÓN DE CLASES
--------------------------------------------------------

• Variables
• Constantes
• Variables estáticas
• Métodos -> de mayor a menor importancia
• Funciones estáticas
• Getters y Setters


--------------------------------------------------------
COMENTARIOS
--------------------------------------------------------

"No comentes código mal escrito, reescríbelo"

Lo ideal es no tener la necesidad de utilizar los comentarios para explicar el funcionamiento del código, sino que el mismo debe ser autodescriptivo y autoexplicativo y que el código y su funcionamiento se expliquen por sí solos.

Los comentarios que dejemos deben ser comentarios de valor, es decir, deben ser comentariosque expliquen el por qué del código.

Si el comentario que vamos a dejar responde a qué hace el código, lo mejor es revisar el código y aplicar las técnicas de Clean Code para que este se explique por sí solo.

--------------------------------------------------------
FORMATO COHERENTE -> REGLAS PARA TRABAJAR EN EQUIPO
--------------------------------------------------------

• Problemas similares, soluciones similares

  Es una buena práctica seguir los mismos patrones de solución.

• Densidad, apertura y distancia vertical

  Las lineas de código que estan relacionadas hay que mantenerlas cerca.

• Lo más importante va primero

  la función o el método principal tienen que estar primero, ya que todo lo que venga después tiene relación con el correcto funcionamiento de ello.

• Indentación

  Lo ideal es que todos los miembros del equipo y los archivos usen de manera homogénea los mismos espacios de indentación.


--------------------------------------------------------
PRINCIPIO DRY (DONT REPEAT YOURSELF)
--------------------------------------------------------

El principio DRY se asegura que cuando se detecte código duplicado, este sea extraído a una clase o función para utilizarlo en donde se necesite

* Ver ejemplos en archivo "principio-dry.js"


--------------------------------------------------------
BIG O NOTATION
--------------------------------------------------------

